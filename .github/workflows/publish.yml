name: Publish to PyPI and npm

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 0.1.0)'
        required: true
        type: string

jobs:
  validate-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version
        id: get-version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
            VERSION="${VERSION#v}"  # Remove 'v' prefix if present
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Publishing version: $VERSION"
      
      - name: Validate version format
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "Error: Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-suffix"
            exit 1
          fi

  publish-pypi:
    needs: validate-version
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write  # Required for trusted publishing
      contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Update version in pyproject.toml
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml
          echo "Updated pyproject.toml version to $VERSION"
          grep "^version = " pyproject.toml
      
      - name: Build Python package
        run: python -m build
      
      - name: Check package
        run: twine check dist/*
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true

  publish-npm:
    needs: validate-version
    runs-on: ubuntu-latest
    environment: release
    permissions:
      contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Set up Python (required for package)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Python package dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
      
      - name: Update version in package.json
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          npm version "$VERSION" --no-git-tag-version
          echo "Updated package.json version to $VERSION"
          grep '"version":' package.json
      
      - name: Test package
        run: |
          node bin/gemini-search-mcp.js --help
      
      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  create-github-release:
    needs: [publish-pypi, publish-npm, validate-version]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Git tag
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"
      
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.validate-version.outputs.version }}
          release_name: Release v${{ needs.validate-version.outputs.version }}
          body: |
            ## What's Changed
            
            Published version ${{ needs.validate-version.outputs.version }} to:
            - ðŸ“¦ [PyPI](https://pypi.org/project/gemini-search-mcp/${{ needs.validate-version.outputs.version }}/)
            - ðŸ“¦ [npm](https://www.npmjs.com/package/gemini-search-mcp/v/${{ needs.validate-version.outputs.version }})
            
            ## Installation
            
            ```bash
            # Python
            pip install gemini-search-mcp==${{ needs.validate-version.outputs.version }}
            
            # Node.js
            npm install -g gemini-search-mcp@${{ needs.validate-version.outputs.version }}
            ```
          draft: false
          prerelease: false
